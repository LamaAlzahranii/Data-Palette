function x(){}const M=t=>t;function k(t,n){for(const e in n)t[e]=n[e];return t}function w(t){return t()}function S(){return Object.create(null)}function j(t){t.forEach(w)}function A(t){return typeof t=="function"}function B(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function F(t){return Object.keys(t).length===0}function E(t,...n){if(t==null){for(const o of n)o(void 0);return x}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function P(t,n,e){t.$$.on_destroy.push(E(n,e))}function U(t,n,e,o){if(t){const c=g(t,n,e,o);return t[0](c)}}function g(t,n,e,o){return t[1]&&o?k(e.ctx.slice(),t[1](o(n))):e.ctx}function C(t,n,e,o){if(t[2]&&o){const c=t[2](o(e));if(n.dirty===void 0)return c;if(typeof c=="object"){const i=[],f=Math.max(n.dirty.length,c.length);for(let u=0;u<f;u+=1)i[u]=n.dirty[u]|c[u];return i}return n.dirty|c}return n.dirty}function D(t,n,e,o,c,i){if(c){const f=g(n,e,o,i);t.p(f,c)}}function G(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let o=0;o<e;o++)n[o]=-1;return n}return-1}function H(t){const n={};for(const e in t)e[0]!=="$"&&(n[e]=t[e]);return n}function I(t,n){const e={};n=new Set(n);for(const o in t)!n.has(o)&&o[0]!=="$"&&(e[o]=t[o]);return e}let l;function _(t){l=t}function m(){if(!l)throw new Error("Function called outside component initialization");return l}function J(t){m().$$.on_mount.push(t)}function K(t){m().$$.after_update.push(t)}const a=[],b=[];let s=[];const h=[],y=Promise.resolve();let p=!1;function v(){p||(p=!0,y.then(q))}function L(){return v(),y}function O(t){s.push(t)}function N(t){h.push(t)}const d=new Set;let r=0;function q(){if(r!==0)return;const t=l;do{try{for(;r<a.length;){const n=a[r];r++,_(n),z(n.$$)}}catch(n){throw a.length=0,r=0,n}for(_(null),a.length=0,r=0;b.length;)b.pop()();for(let n=0;n<s.length;n+=1){const e=s[n];d.has(e)||(d.add(e),e())}s.length=0}while(a.length);for(;h.length;)h.pop()();p=!1,d.clear(),_(t)}function z(t){if(t.fragment!==null){t.update(),j(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(O)}}function Q(t){const n=[],e=[];s.forEach(o=>t.indexOf(o)===-1?n.push(o):e.push(o)),e.forEach(o=>o()),s=n}export{a as A,v as B,K as a,b,U as c,C as d,P as e,k as f,G as g,I as h,M as i,H as j,N as k,O as l,A as m,x as n,J as o,S as p,q,j as r,B as s,L as t,D as u,F as v,Q as w,l as x,_ as y,w as z};
